#repositories

from keras.datasets import mnist
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D
from keras.utils import to_categorical

import numpy as np
np.random.seed(0)

import matplotlib.pyplot as plt
%matplotlib inline

#data_upload
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train.shape, x_test.shape

for idx in range(25):
    plt.subplot(5, 5, idx+1)
    plt.imshow(x_train[idx+199])
    plt.title('Class: {}'.format(y_train[idx]))

#image_shape
img_rows, img_cols = x_train.shape[1], x_train.shape[2]

x_train = x_train.reshape(-1, img_rows, img_cols, 1)
x_test = x_test.reshape(-1, img_rows, img_cols, 1)

input_shape = (img_rows, img_cols, 1)
x_train.shape, x_test.shape

if np.max(x_train) > 1: x_train = x_train / 255
if np.max(x_test) > 1: x_test = x_test / 255

if len(y_train.shape) == 1:
    num_classes = len(set(y_train))
    y_train = to_categorical(y_train, num_classes)
    y_test = to_categorical(y_test, num_classes)
#model    
model = Sequential([
    
Conv2D(filters=32, kernel_size=(3, 3), input_shape=input_shape),
MaxPool2D(pool_size=(2, 2)),

Conv2D(filters=64, kernel_size=(3, 3)),
MaxPool2D(pool_size=(2, 2)),

Flatten(),
Dense(512, activation='relu'), Dense(num_classes, activation='softmax')
                 
])
                   
model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])    
#model_fitting
model.fit(
    x_train, y_train,
    batch_size=128,
    epochs=3,
    validation_data=(x_test, y_test)
)

score = model.evaluate(x_test, y_test, verbose=0)
score
